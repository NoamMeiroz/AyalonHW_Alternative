# docker-compose.yml
version: '3'  
services:
  mysql:
    image: mysql:8.0.25
    restart: always
    command: --default-authentication-plugin=mysql_native_password
    stdin_open: true
    tty: true
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
    ports:
      - '3306:3306'
    volumes: 
      - db-data:/var/lib/mysql
      - ./mysql:/etc/mysql/conf.d
  osrm:
    image: osrm/osrm-backend
    restart: always
    volumes:
      - db-osrm:/data
    ports:
      - '6000:4000'
    stdin_open: true
    tty: true
    #command: ["osrm-extract", "-p", "/opt/car.lua", "/data/israel-and-palestine-latest.osm.pbf"] 
    #command: ["osrm-partition", "/data/israel-and-palestine-latest.osrm"] 
    #command: ["osrm-customize", "/data/israel-and-palestine-latest.osrm"]
    command: ["osrm-routed", "--port", "4000", "--max-table-size", "1000000", "--algorithm", "mld", "/data/israel-and-palestine-latest.osrm"]
  clustering:
    build:
      context: ./clustering
      dockerfile: dockerfile_clustering
    volumes:
      - /clustering/node_modules
      - /clustering
      - ./clustering/logs:/clustering/logs
    environment:
      - PORT=${CLUSTERING_PORT}
      - OSRM_SERVER=osrm
      - OSRM_PORT=4000
    restart: always
    stdin_open: true
    tty: true
    command: ["npm", "run", "start"] 
    depends_on:
      - osrm
  node_server:
    build:
      context: ./server
      dockerfile: dockerfile_server.dev
    volumes:
      - ./server/node_modules:/server/node_modules
      - ./server:/server
    #  - /server/node_modules
    #  - /server
    environment: 
      - mysql_server=mysql
      - NODE_ENV=development
      - CLUSTERING_SERVER=clustering
      - CLUSTERING_PORT=3500
    restart: always
    stdin_open: true
    tty: true
    depends_on:
      - mysql
      - clustering
    command: ["npm", "run", "dev"] 
  node_server_test:
    build:
      context: ./server
      dockerfile: dockerfile_server.dev
    volumes:
      - /app/node_modules
      - ./server:/app
#    ports:
#      - 5050:5000
    environment: 
      - mysql_server=mysql
      - NODE_ENV=test
    stdin_open: true
    tty: true
    command: ["npm", "test"]
  native_laasakim_dev:
    environment:
      - REACT_APP_SERVER=${SERVER}
    build:
      context: ./client
      dockerfile: dockerfile_app.dev
    volumes:
      - ./client/node_modules:/client/node_modules
      - ./client:/client
    restart: always
    stdin_open: true
    tty: true
    depends_on:
      - node_server
    command: ["npm", "start"]
  native_laasakim:
    environment:
      - REACT_APP_SERVER=www.nativapp.co.il
      - IMAGE_INLINE_SIZE_LIMIT=0
      - INLINE_RUNTIME_CHUNK=false
    build:
      context: ./client
      dockerfile: .dockerfile
      args:
        - REACT_APP_SERVER=www.nativapp.co.il
    stdin_open: true
    tty: true
    depends_on:
      - node_server
  nginx_dev:
    build:
      dockerfile: dockerfile_nginx.dev
      context: ./nginx
    ports:
      - "8080:80"
      - "443:443"
    depends_on:
      - native_laasakim_dev
      - node_server
    volumes: 
      - /home/amit/workspace/employers_program/reports/AyalonHW_Alternative/secret:/etc/nginx/certs
      - node_logs:/spool/logs
      - pdf_files:/www/pdf
  nginx:
    build:
      dockerfile: dockerfile
      context: ./nginx
    ports:
      - "8080:80"
      - "443:443"
    depends_on:
      - native_laasakim
      - node_server
    volumes: 
      - /home/amit/workspace/employers_program/reports/AyalonHW_Alternative/secret:/etc/nginx/certs
      - node_logs:/spool/logs
      - pdf_files:/www/pdf
  bi:
    build:
      dockerfile: dockerfile_bi
      context: ./bi
      args:
        - BI_ROOT_PASSWORD=${BI_ROOT_PASSWORD}
    depends_on:
      - mysql
    ports:
      - 8000:8088
    volumes: 
      - bi-config:/app/pythonpath/
      - /home/amit/workspace/employers_program/reports/AyalonHW_Alternative/secret:/app/secret
    # command: ["superset", "run", "--cert", "/app/secret/native.crt", "--key", "/app/secret/native.key", -p, "8088", -h, "0.0.0.0"]
    command: ["gunicorn", "-w 8", "--timeout", "120", "-b 0.0.0.0:8088", "--limit-request-line", "0", "--limit-request-field_size", "0", "--certfile", "/app/secret/native.crt", "--keyfile", "/app/secret/native.key", "superset.app:create_app()"]
    # command: ["flask", "run", "-p", "8088", "--with-threads", "--reload", "--cert=/app/secret/native.crt", "--key=/app/secret/native.key", "--host=0.0.0.0"]
volumes:
  db-data:
    driver: local
    driver_opts:
      o: bind
      type: None
      #device: /home/amit/workspace/employers_program/db-data
      device: /home/amit/workspace/employers_program/data/db_backup
  node_logs:
    driver: local
    driver_opts:
      o: bind
      type: None
      device: /home/amit/workspace/employers_program/reports/AyalonHW_Alternative/server/logs
  pdf_files:
    driver: local
    driver_opts:
      o: bind
      type: None
      device: /home/amit/workspace/employers_program/reports/AyalonHW_Alternative/pdf
  db-osrm:
    driver: local
    driver_opts: 
      o: bind
      type: None
      device: /home/amit/workspace/employers_program/db-osrm
  bi-config:
    driver: local
    driver_opts:
      o: bind
      type: None
      device: /home/amit/workspace/employers_program/reports/AyalonHW_Alternative/bi/config
